/'ADDER'/

module carrylaadd(a,b,sum,cout);
parameter n=4;
input[n-1:0] a,b;
output[n-1:0] sum,cout;
wire[n:0] c;
wire[n-1:0] g,p;
assign c[0]=1'b0;
genvar i;
generate
for(i=0;i<n;i=i+1)
begin :u1
assign p[i]=a[i]^b[i];
assign g[i]=a[i]&b[i];
assign sum[i]=p[i]^c[i];
assign c[i+1]=g[i]|(p[i]&c[i]);
end
endgenerate
assign cout=c[n];
endmodule

/'ADDER TESTBENCH'/

module carrylaadd_tb();
reg [3:0]a,b;
wire [3:0]sum;
wire cout;
carrylaadd uut(a,b,sum,cout);
initial 
begin
a=4'b 0000;b=4'b 0001;
#20
a=4'b 1010;b=4'b 0101;
#20
a=4'b 0011;b=4'b 1011;
#20
a=4'b 1001;b=4'b 0110;
#20
$stop;
end
endmodule


/'MULTIPLEXER'/

module Multiplier_4(
 input [3:0] A,
 input [3:0] B,
 output [7:0] Product
 );
 wire w1,w2,w3,w4,w5,w6,w7,w8,w9,w10,w11,w12,w13,w14,w15,w16,w17;
 assign Product[0]= (A[0]&B[0]);
 Half_Adder HA1((A[1]&B[0]),(A[0]&B[1]),Product[1],w1);
 Full_Adder FA1((A[1]&B[1]),(A[0]&B[2]),w1,w2,w3);
 Full_Adder FA2((A[1]&B[2]),(A[0]&B[3]),w3,w4,w5);
 Half_Adder HA2((A[1]&B[3]),w5,w6,w7);
 Half_Adder HA3(w2,(A[2]&B[0]),Product[2],w15);
 Full_Adder FA3(w4,(A[2]&B[1]),w15,w14,w16);
 Full_Adder FA4(w6,(A[2]&B[2]),w16,w13,w17);
 Full_Adder FA5(w7,(A[2]&B[3]),w17,w9,w8);
 Half_Adder HA4(w14,(A[3]&B[0]),Product[3],w12);
 Full_Adder FA6(w13,(A[3]&B[1]),w12,Product[4],w11);
 Full_Adder FA7(w9,(A[3]&B[2]),w11,Product[5],w10);
 Full_Adder FA8(w8,(A[3]&B[3]),w10,Product[6],Product[7]);
endmodule


/ Multiplexer Testbench/

module carrylaadd_tb();
reg [3:0]a,b;
wire [3:0]sum;
wire cout;
carrylaadd uut(a,b,sum,cout);
initial 
begin
a=4'b 0000;b=4'b 0001;
#20
a=4'b 1010;b=4'b 0101;
#20
a=4'b 0011;b=4'b 1011;
#20
a=4'b 1001;b=4'b 0110;
#20
$stop;
end
endmodule
